State Management for Module Federation Four Ways (https://www.youtube.com/watch?v=njXeMeAu4Sg)

https://github.com/jherr/module-federation-state-management
https://github.com/Annie-Huang/module-federation-state-management

-------------------------------------------------------------------------------
simple folder:
-------------------------------------------------------------------------------

PS C:\react\module-federation-state-management\simple> npx create-mf-app
? Pick the name of your app: host
? Project Type: Application
? Port number: 3000
? Framework: react
? Language: typescript
? CSS: Tailwind
? Packer: Webpack
Your 'host' project is ready to go.

Next steps:

▶️ cd host
▶️ npm install
▶️ npm start

PS C:\react\module-federation-state-management\simple> cd .\host\
PS C:\react\module-federation-state-management\simple\host> npm install
PS C:\react\module-federation-state-management\simple\host> npm run start
http://localhost:3000/

-------------------------------------------------------------------------------

PS C:\react\module-federation-state-management\simple> npx create-mf-app
? Pick the name of your app: nav
? Project Type: Application
? Port number: 3001
? Framework: react
? Language: typescript
? CSS: Tailwind
? Packer: Webpack
Your 'nav' project is ready to go.

Next steps:

▶️ cd nav
▶️ npm install
▶️ npm start

PS C:\react\module-federation-state-management\simple> cd .\nav\
PS C:\react\module-federation-state-management\simple\nav> npm install
PS C:\react\module-federation-state-management\simple\nav> npm run start
http://localhost:3001/

http://localhost:3001/remoteEntry.js

PS C:\react\module-federation-state-management\simple\nav> npm run build:dev
Open C:\react\module-federation-state-management\simple\nav\dist\src_Header_tsx.js

-------------------------------------------------------------------------------

PS C:\react\module-federation-state-management\simple> npx create-mf-app
? Pick the name of your app: mfe-shared
? Project Type: Library
Your 'mfe-shared' project is ready to go.

Next steps:

▶️ cd mfe-shared
▶️ npm install
▶️ npm start

PS C:\react\module-federation-state-management\simple> cd .\mfe-shared\
PS C:\react\module-federation-state-management\simple\mfe-shared> npm install
PS C:\react\module-federation-state-management\simple\mfe-shared> npm install react react-dom
PS C:\react\module-federation-state-management\simple\mfe-shared> npm install @types/react @types/react-dom -D

PS C:\react\module-federation-state-management\simple\mfe-shared> npm run build
--> Create dist/index.d.ts file

PS C:\react\module-federation-state-management\simple\mfe-shared> npm link      <-- I don't really like this solution.
Then go back to nav and host app:
PS C:\react\module-federation-state-management\simple\nav> npm link mfe-shared      <-- in nav
PS C:\react\module-federation-state-management\simple\host> npm link mfe-shared     <-- host

-------------------------------------------------------------------------------
use-context folder:
-------------------------------------------------------------------------------
Pretty much did the same thing as 'simple folder'

-------------------------------------------------------------------------------
zustand folder:
-------------------------------------------------------------------------------
Pretty much did the same thing as 'simple folder' plus the following:
PS C:\react\module-federation-state-management\zustand\host> npm install zustand

-------------------------------------------------------------------------------
redux folder:
-------------------------------------------------------------------------------
Pretty much did the same thing as 'simple folder', the same way to create 'host' and 'nav' apps, plus the following:

PS C:\react\module-federation-state-management> cd .\redux\
PS C:\react\module-federation-state-management\redux> npx create-mf-app
? Pick the name of your app: store
? Project Type: Application
? Port number: 3002
? Framework: react
? Language: typescript
? CSS: Tailwind
? Packer: Webpack
Your 'store' project is ready to go.

Next steps:

▶️ cd store
▶️ npm install
▶️ npm start

PS C:\react\module-federation-state-management\redux> cd .\store\
PS C:\react\module-federation-state-management\redux\store> npm install

PS C:\react\module-federation-state-management\redux\store> npm install @reduxjs/toolkit react-redux

https://redux-toolkit.js.org/tutorials/quick-start

http://localhost:3002/
http://localhost:3002/remoteEntry.js

-------------------------------------------------------------------------------

simple: state management through useState
    --> Use mfe-shared lib to share the type, make symbolic link.
use-context: state management through useContext
    --> Just hard coded the type in @types/nav/Header/index.d.ts file without making the link.
    --> The same for C:\react\module-federation-state-management\use-context\host\src\@types\host\store\index.d.ts
        and C:\react\module-federation-state-management\use-context\nav\src\@types\host\store\index.d.ts file
zustand: state management through zustand
   --> Much cleaner code, just use store without using <CountProvider> to wrap around things.
redux: state management through redux











